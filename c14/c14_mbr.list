     1                                           ;代码清单13-1
     2                                           ;文件名：c13_mbr.asm
     3                                           ;文件说明：硬盘主引导扇区代码 
     4                                           ;创建日期：2011-10-28 22:35          ;设置堆栈段和栈指针 
     5                                           
     6                                           core_base_address equ 0x00040000   ;常数，内核加载的起始内存地址 
     7                                           core_start_sector equ 0x00000001   ;常数，内核的起始逻辑扇区号 
     8                                           
     9 00000000 8CC8                             mov ax,cs      
    10 00000002 8ED0                             mov ss,ax
    11 00000004 BC007C                           mov sp,0x7c00
    12                                        
    13                                           ;计算GDT所在的逻辑段地址
    14 00000007 2E66A1[9B7D]                     mov eax,[cs:pgdt+0x7c00+0x02]      ;GDT的32位物理地址 
    15 0000000C 6631D2                           xor edx,edx
    16 0000000F 66BB10000000                     mov ebx,16
    17 00000015 66F7F3                           div ebx                            ;分解成16位逻辑地址 
    18                                  
    19 00000018 8ED8                             mov ds,eax                         ;令DS指向该段以进行操作
    20 0000001A 6689D3                           mov ebx,edx                        ;段内起始偏移地址 
    21                                  
    22                                           ;跳过0#号描述符的槽位
    23                                           ;0号描述符一定是空的
    24                                  
    25                                  
    26                                           ;创建1#描述符，这是一个数据段，对应0~4GB的线性地址空间
    27 0000001D 6667C74308FFFF0000               mov dword [ebx+0x08],0x0000ffff    ;基地址为0，段界限为0xFFFFF
    28 00000026 6667C7430C0092CF00               mov dword [ebx+0x0c],0x00cf9200    ;粒度为4KB，存储器段描述符 
    29                                  
    30                                           ;创建2#描述符 保护模式下初始代码段描述符
    31 0000002F 6667C74310FF01007C               mov dword [ebx+0x10],0x7c0001ff    ;基地址为0x00007c00，界限0x1FF 
    32 00000038 6667C7431400984000               mov dword [ebx+0x14],0x00409800    ;粒度为1个字节，代码段描述符。DPL为00
    33                                  
    34                                           ;创建3#描述符 保护模式下的堆栈段描述符   ;基地址为0x00007C00，界限0xFFFFE 
    35 00000041 6667C74318FEFF007C               mov dword [ebx+0x18],0x7c00fffe    ;粒度为4KB 
    36 0000004A 6667C7431C0096CF00               mov dword [ebx+0x1c],0x00cf9600    ;堆栈最低端的有效物理地址:0x00006C00
    37                                                                              ;堆栈最低端的有效物理地址:0x00007BFF
    38                                           
    39                                           ;创建4#描述符 建立保护模式下的显示缓冲区描述符   
    40 00000053 6667C74320FF7F0080               mov dword [ebx+0x20],0x80007fff    ;基地址为0x000B8000，界限0x07FFF 
    41 0000005C 6667C743240B924000               mov dword [ebx+0x24],0x0040920b    ;粒度为字节
    42                                           
    43                                           ;初始化描述符表寄存器GDTR
    44 00000065 2EC706[997D]2700                 mov word [cs: pgdt+0x7c00],39      ;描述符表的界限   
    45                                   
    46 0000006C 2E0F0116[997D]                   lgdt [cs: pgdt+0x7c00]
    47                                        
    48 00000072 E492                             in al,0x92                         ;南桥芯片内的端口 
    49 00000074 0C02                             or al,0000_0010B
    50 00000076 E692                             out 0x92,al                        ;打开A20
    51                                  
    52 00000078 FA                               cli                                ;中断机制尚未工作
    53                                  
    54 00000079 0F20C0                           mov eax,cr0
    55 0000007C 6683C801                         or eax,1
    56 00000080 0F22C0                           mov cr0,eax                        ;设置PE位开启保护模式
    57                                        
    58                                           ;以下进入保护模式... ...
    59 00000083 66EA[8B000000]1000               jmp dword 0x0010:flush             ;16位的描述符选择子：32位偏移
    60                                                                              ;清流水线并串行化处理器
    61                                           [bits 32]               
    62                                    flush:                                  
    63 0000008B B808000000                       mov eax,0x0008                     ;加载数据段(0..4GB)选择子
    64 00000090 8ED8                             mov ds,eax
    65                                        
    66 00000092 B818000000                       mov eax,0x0018                     ;加载堆栈段选择子 
    67 00000097 8ED0                             mov ss,eax
    68 00000099 31E4                             xor esp,esp                        ;堆栈指针 <- 0 
    69                                  
    70                                  
    71                                  
    72                                  
    73                                           ;以下加载系统核心程序 
    74 0000009B BF00000400                       mov edi,core_base_address          ;用寄存器存储 参数
    75                                  
    76 000000A0 B801000000                       mov eax,core_start_sector          
    77 000000A5 89FB                             mov ebx,edi                        ;起始地址（读到这个内存起始处） 
    78 000000A7 E88D000000                       call read_hard_disk_0              ;read_hard_disk_0读取程序的起始部分（一个扇区），运行后EBX=EBX+512，刚好可以接着读
    79                                        
    80                                           ;以下判断整个程序有多大
    81 000000AC 8B07                             mov eax,[edi]                      ;核心程序尺寸，[edi]这个地址中的内容，对应在上面读了的一个扇区。这个扇区的开头记录着内核程序的大小。
    82 000000AE 31D2                             xor edx,edx                        ;EDX:EAX / operand
    83 000000B0 B900020000                       mov ecx,512                        ;512字节每扇区
    84 000000B5 F7F1                             div ecx                            ;商在EAX，余数在EDX
    85                                  
    86 000000B7 09D2                             or edx,edx
    87 000000B9 7501                             jnz @1                             ;未除尽，因此结果比实际扇区数少1 
    88 000000BB 48                               dec eax                            ;已经读了一个扇区，扇区总数减1 
    89                                     @1:
    90 000000BC 09C0                             or eax,eax                         ;考虑实际长度≤512个字节的情况 
    91 000000BE 7410                             jz setup                           ;判断是否EAX=0 ?，EAX里面装的就是需要继续读入的扇区数目
    92                                  
    93                                           ;读取剩余的扇区
    94 000000C0 89C1                             mov ecx,eax                        ;32位模式下的LOOP使用ECX
    95 000000C2 B801000000                       mov eax,core_start_sector
    96 000000C7 40                               inc eax                            ;从下一个逻辑扇区接着读
    97                                     @2:
    98 000000C8 E86C000000                       call read_hard_disk_0
    99 000000CD 40                               inc eax
   100 000000CE E2F8                             loop @2                            ;循环读，直到读完整个内核 
   101                                  
   102                                   setup:
   103 000000D0 8B35[9B7D0000]                   mov esi,[0x7c00+pgdt+0x02]         ;不可以用代码段描述符寻址pgdt（因为描述符是只执行，不能读），但可以通过4GB的段来访问
   104                                  
   105                                           ;建立公用例程段描述符 创建5#描述符
   106 000000D6 8B4704                           mov eax,[edi+0x04]                 ;公用例程代码段起始汇编地址（相对于文件最开始）
   107 000000D9 8B5F08                           mov ebx,[edi+0x08]                 ;核心数据段汇编地址
   108 000000DC 29C3                             sub ebx,eax
   109                                  
   110 000000DE 4B                               dec ebx                            ;公用例程段界限（偏移的取值，包含最后一个字节） 
   111 000000DF 01F8                             add eax,edi                        ;公用例程段（在内存中的）基地址，edi放的是core_base_address
   112 000000E1 B900984000                       mov ecx,0x00409800                 ;字节粒度的代码段描述符（约定各属性位都在原始位置，其它没用到的位置0）
   113                                           ;make_gdt_descriptor例程返回如下存于EDX:EAX完整的描述符
   114                                  
   115 000000E6 E893000000                       call make_gdt_descriptor
   116 000000EB 894628                           mov [esi+0x28],eax                 ;0x28 = 40decimal,一个描述符8个字节，说明前面已经有5个描述符
   117 000000EE 89562C                           mov [esi+0x2c],edx
   118                                         
   119                                           ;建立核心数据段描述符 创建6#描述符
   120 000000F1 8B4708                           mov eax,[edi+0x08]                 ;核心数据段起始汇编地址
   121 000000F4 8B5F0C                           mov ebx,[edi+0x0c]                 ;核心代码段汇编地址 
   122 000000F7 29C3                             sub ebx,eax
   123 000000F9 4B                               dec ebx                            ;核心数据段界限
   124 000000FA 01F8                             add eax,edi                        ;核心数据段基地址，edi放的是core_base_address
   125 000000FC B900924000                       mov ecx,0x00409200                 ;字节粒度的数据段描述符，（约定各属性位都在原始位置，其它没用到的位置0）
   126 00000101 E878000000                       call make_gdt_descriptor
   127 00000106 894630                           mov [esi+0x30],eax
   128 00000109 895634                           mov [esi+0x34],edx 
   129                                        
   130                                           ;建立核心代码段描述符 创建7#描述符
   131 0000010C 8B470C                           mov eax,[edi+0x0c]                 ;核心代码段起始汇编地址
   132 0000010F 8B1F                             mov ebx,[edi+0x00]                 ;程序总长度
   133 00000111 29C3                             sub ebx,eax
   134 00000113 4B                               dec ebx                            ;核心代码段界限
   135 00000114 01F8                             add eax,edi                        ;核心代码段基地址
   136 00000116 B900984000                       mov ecx,0x00409800                 ;字节粒度的代码段描述符
   137                                           ;mov ecx,0x00409C00                 ;字节粒度的依从代码段描述符
   138 0000011B E85E000000                       call make_gdt_descriptor
   139 00000120 894638                           mov [esi+0x38],eax
   140 00000123 89563C                           mov [esi+0x3c],edx
   141                                  
   142 00000126 66C705[997D0000]3F-              mov word [0x7c00+pgdt],63          ;增加描述符表的界限，从而容纳新的描述符
   142 0000012E 00                 
   143                                                                          
   144 0000012F 0F0115[997D0000]                 lgdt [0x7c00+pgdt]                 ;重新加载gdt
   145                                  
   146                                  
   147                                           ;当前CS段寄存器的最后两位为00
   148                                           ;当前CS段寄存器指向的代码段的DPL也是00
   149 00000136 FF6F10                           jmp far [edi+0x10]                 ;远跳转core_base_address + 0x10这就是程序的入口，高地址存CS，低地址存ESP
   150                                           ;跳转的目标的入口点如下：
   151                                           ;core_entry       dd start          ;核心代码段入口点#10
   152                                           ;                 dw core_code_seg_sel
   153                                  
   154                                           ;core_code_seg_sel内容的 RPL 是00
   155                                           ;core_code_seg_sel指向的代码段描述符是GDT 中的下标为7的项，这个描述符其DPL为00，非依从
   156                                  
   157                                           ;从当前位置 转移到非依从代码段则必须有
   158                                           ;CPL 00 == 目标代码段描述符的DPL 00
   159                                           ;RPL 00 == 目标代码段描述符的DPL 00          （RPL的值来自 将要使用的选择子数值的最后两位）
   160                                  
   161                                  
   162                                  
   163                                  
   164                                  
   165                                  
   166                                  ;-------------------------------------------------------------------------------
   167                                  read_hard_disk_0:                        ;从硬盘读取一个逻辑扇区
   168                                                                           ;EAX=逻辑扇区号
   169                                                                           ;DS:EBX=目标缓冲区地址
   170                                                                           ;返回：EBX=EBX+512 
   171                                           ;保存会用到的寄存器
   172 00000139 50                               push eax 
   173 0000013A 51                               push ecx
   174 0000013B 52                               push edx
   175                                  
   176                                           ;保存逻辑扇区号参数
   177 0000013C 50                               push eax
   178                                         
   179                                  
   180                                           ;第 1 步，设置要读取的扇区数量。 
   181 0000013D 66BAF201                         mov dx,0x1f2
   182 00000141 B001                             mov al,1                        ;读取的扇区数
   183 00000143 EE                               out dx,al                       ;把al的值写入dx寄存器中代表的端口号（端口就是寄存器）中。
   184                                  
   185                                  
   186                                           ;第 2 步，设置起始 LBA 扇区号。
   187                                           ;28 位的扇区号太长，需要将其分成 4 段，分别写入端口 0x1f3、0x1f4、0x1f5 和 0x1f6 号端口。
   188 00000144 6642                             inc dx                          ;dx寄存器中代表的端口号:0x1f3
   189 00000146 58                               pop eax
   190 00000147 EE                               out dx,al                       ;LBA地址7~0
   191                                  
   192 00000148 6642                             inc dx                          ;dx寄存器中代表的端口号:0x1f4
   193 0000014A B108                             mov cl,8                        
   194 0000014C D3E8                             shr eax,cl                      ;（逻辑）右移
   195 0000014E EE                               out dx,al                       ;LBA地址15~8
   196                                  
   197 0000014F 6642                             inc dx                          ;0x1f5
   198 00000151 D3E8                             shr eax,cl
   199 00000153 EE                               out dx,al                       ;LBA地址23~16
   200                                  
   201 00000154 6642                             inc dx                          ;0x1f6
   202 00000156 D3E8                             shr eax,cl
   203 00000158 0CE0                             or al,0xe0                      ;第一硬盘（主硬盘）  LBA地址27~24，参考0x1f6 号端口中的寄存器意义
   204 0000015A EE                               out dx,al
   205                                  
   206 0000015B 6642                             inc dx                          ;0x1f7
   207 0000015D B020                             mov al,0x20                     ;读命令
   208 0000015F EE                               out dx,al
   209                                  
   210                                    .waits:                                ;轮询式等待并查询
   211 00000160 EC                               in al,dx                        ;获取端口0x1f7中的值
   212 00000161 2488                             and al,0x88                     ;0x88 1000_1000B
   213 00000163 3C08                             cmp al,0x08                     ;0x08 0000_1000B 表示不忙，且硬盘已准备好数据传输
   214 00000165 75F9                             jnz .waits                      ;不忙，且硬盘已准备好数据传输 
   215                                  
   216 00000167 B900010000                       mov ecx,256                     ;总共要读取的字数
   217 0000016C 66BAF001                         mov dx,0x1f0
   218                                    .readw:
   219 00000170 66ED                             in ax,dx
   220 00000172 668903                           mov [ebx],ax
   221 00000175 83C302                           add ebx,2                       ;每次两个字节
   222 00000178 E2F6                             loop .readw
   223                                         
   224                                           ;栈平衡
   225 0000017A 5A                               pop edx
   226 0000017B 59                               pop ecx
   227 0000017C 58                               pop eax
   228                                        
   229 0000017D C3                               ret
   230                                  
   231                                  ;-------------------------------------------------------------------------------
   232                                  make_gdt_descriptor:                     ;构造描述符
   233                                                                           ;输入： EAX=线性基地址（内存中的）
   234                                                                           ;      EBX=段界限
   235                                                                           ;      ECX=属性（约定各属性位都在原始位置，其它没用到的位置0） 
   236                                                                           ;
   237                                                                           ;返回： EDX:EAX=完整的描述符
   238 0000017E 89C2                             mov edx,eax
   239 00000180 C1E010                           shl eax,16                     
   240 00000183 6609D8                           or ax,bx                        ;描述符前（位于低地址的32位）32位(EAX)构造完毕
   241                                        
   242 00000186 81E20000FFFF                     and edx,0xffff0000              ;清除基地址中无关的位
   243 0000018C C1C208                           rol edx,8
   244 0000018F 0FCA                             bswap edx                       ;装配基址的31~24和23~16  (80486+)bswap交换edx中字节的顺序3210变成0123
   245                                        
   246 00000191 6631DB                           xor bx,bx                       ;清空EBX寄存器的低16位(EBX寄存器存了20位段界限)
   247 00000194 09DA                             or edx,ebx                      ;装配段界限的高4位
   248                                        
   249 00000196 09CA                             or edx,ecx                      ;装配属性 
   250                                        
   251 00000198 C3                               ret
   252                                        
   253                                  ;-------------------------------------------------------------------------------
   254 00000199 0000                             pgdt             dw 0
   255 0000019B 007E0000                                          dd 0x00007e00      ;GDT的物理地址
   256                                  ;-------------------------------------------------------------------------------                             
   257 0000019F 00<rept>                         times 510-($-$$) db 0
   258 000001FE 55AA                                              db 0x55,0xaa
