     1                                           ;代码清单13-3
     2                                           ;文件名：c13.asm
     3                                           ;文件说明：用户程序 
     4                                           ;创建日期：2011-10-30 15:19   
     5                                  
     6                                  ;程序头部
     7                                  ;===============================================================================
     8                                  SECTION header vstart=0
     9                                  
    10 00000000 [00000000]                       program_length   dd program_end          ;程序总长度#0x00
    11                                           
    12 00000004 [28030000]                       head_len         dd header_end           ;程序头部的长度#0x04,这里之后会被填写一个程序头部的段描述符
    13                                  
    14                                           ;堆栈空间由内核分配，;选择子由内核之后填写
    15 00000008 00000000                         stack_seg        dd 0                    ;用于接收堆栈段选择子#0x08
    16 0000000C 01000000                         stack_len        dd 1                    ;程序建议的堆栈大小，以4KB为单位，#0x0C
    17                                                                                    
    18 00000010 [00000000]                       prgentry         dd start                ;程序入口#0x10 
    19                                           ;选择子由内核之后填写
    20 00000014 [00000000]                       code_seg         dd section.code.start   ;代码段位置#0x14 相对于整个用户程序开头。[这里之后会被内核被填写一个程序代码段描述符]
    21 00000018 [53000000]                       code_len         dd code_end             ;用户代码段长度#0x18
    22                                  
    23                                           ;选择子由内核之后填写
    24 0000001C [00000000]                       data_seg         dd section.data.start   ;数据段位置#0x1c 相对于整个用户程序开头。[这里之后会被内核填写一个程序数据段描述符]
    25 00000020 [40040000]                       data_len         dd data_end             ;数据段长度#0x20
    26                                               
    27                                  ;-------------------------------------------------------------------------------
    28                                           ;符号地址检索表 Symbol-Address Lookup Table，SALT；每个项长度为256
    29                                           ;内核会分析这个表格，并将每一个符号名替换成相应的内存地址，这就是过程的重定位。
    30 00000024 03000000                         salt_items       dd (header_end - salt) / 256 ;#0x24
    31                                           
    32                                           salt:                                     ;#0x28
    33 00000028 405072696E74537472-              PrintString      db  '@PrintString'       ;内核进行重定位后，这些字符串的开头就会被换成 被调用函数的 偏移地址 + 段选择子
    33 00000031 696E67             
    34 00000034 00<rept>                                     times 256-($-PrintString) db 0
    35                                                       
    36 00000128 405465726D696E6174-              TerminateProgram db  '@TerminateProgram';内核进行重定位后，这些字符串的开头就会被换成 被调用函数的 偏移地址 + 段选择子
    36 00000131 6550726F6772616D   
    37 00000139 00<rept>                                     times 256-($-TerminateProgram) db 0
    38                                                       
    39 00000228 40526561644469736B-              ReadDiskData     db  '@ReadDiskData';内核进行重定位后，这些字符串的开头就会被换成 被调用函数的 偏移地址 + 段选择子
    39 00000231 44617461           
    40 00000235 00<rept>                                     times 256-($-ReadDiskData) db 0
    41                                                   
    42                                  header_end:
    43                                  
    44                                  
    45                                  
    46                                  ;用户程序数据段
    47                                  ;===============================================================================
    48                                  SECTION data vstart=0    
    49                                                           
    50 00000000 00<rept>                         buffer times 1024 db  0         ;缓冲区
    51                                  
    52 00000400 0D0A0D0A                         message_1         db  0x0d,0x0a,0x0d,0x0a
    53 00000404 2A2A2A2A2A2A2A2A2A-                                db  '**********User program is runing**********'
    53 0000040D 2A557365722070726F-
    53 00000416 6772616D2069732072-
    53 0000041F 756E696E672A2A2A2A-
    53 00000428 2A2A2A2A2A2A       
    54 0000042E 0D0A00                                             db  0x0d,0x0a,0
    55 00000431 20204469736B206461-              message_2         db  '  Disk data:',0x0d,0x0a,0
    55 0000043A 74613A0D0A00       
    56                                  
    57                                  data_end:
    58                                  
    59                                  
    60                                  
    61                                  
    62                                  ;用户程序代码段
    63                                  ;===============================================================================
    64                                        [bits 32]
    65                                  ;===============================================================================
    66                                  SECTION code vstart=0
    67                                  start:
    68 00000000 8CD8                             mov eax,ds
    69 00000002 8EE0                             mov fs,eax                          ;fs会得到 指向程序头部 的段选择子
    70                                       
    71 00000004 A1[08000000]                     mov eax,[stack_seg]
    72 00000009 8ED0                             mov ss,eax
    73 0000000B BC00000000                       mov esp,0
    74                                       
    75 00000010 A1[1C000000]                     mov eax,[data_seg]
    76 00000015 8ED8                             mov ds,eax
    77                                       
    78 00000017 BB[00040000]                     mov ebx,message_1
    79 0000001C 64FF1D[28000000]                 call far [fs:PrintString]
    80                                       
    81 00000023 B864000000                       mov eax,100                         ;逻辑扇区号100
    82 00000028 BB[00000000]                     mov ebx,buffer                      ;缓冲区偏移地址
    83 0000002D 64FF1D[28020000]                 call far [fs:ReadDiskData]          ;段间调用
    84                                       
    85 00000034 BB[31040000]                     mov ebx,message_2
    86 00000039 64FF1D[28000000]                 call far [fs:PrintString]
    87                                       
    88 00000040 BB[00000000]                     mov ebx,buffer 
    89 00000045 64FF1D[28000000]                 call far [fs:PrintString]           ;too.
    90                                       
    91 0000004C 64FF2D[28010000]                 jmp far [fs:TerminateProgram]       ;将控制权返回到系统 
    92                                        
    93                                  code_end:
    94                                  
    95                                  
    96                                  
    97                                  ;===============================================================================
    98                                  SECTION trail
    99                                  ;-------------------------------------------------------------------------------
   100                                  program_end:
